% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pragmatic.R
\name{pragmatic}
\alias{pragmatic}
\title{Pragmatic hypothesis calculation}
\usage{
pragmatic(null, epsilon, log_f, generate_samples, B = 1000,
  connected = TRUE, par_grid = NULL, symmetrical = FALSE, ...)
}
\arguments{
\item{null}{Numeric. The original null hypothesis point.}

\item{epsilon}{Numeric. The desired dissimilarity threshold.}

\item{log_f}{Function. A function that computes the log-likelihood of a new experiment. See also 'Examples'.}

\item{generate_samples}{Function. A funtion that generates new samples from the original distribution. See also 'Examples'.}

\item{B}{Numeric. Number of Monte Carlo simulations. Higher values might take longer to run but lead to more accurate results. Default set to 1000 simulations.}

\item{connected}{Boolean. For default, the pragmatic function assumes the real pragmatic is connect (a convex set), if this does not suit a particular example, set this parameter to FALSE.}

\item{par_grid}{Numeric vector. If connected = FALSE, par_grid have to be a grid of points to test belonginess to the pragmatic. Ignored if connected = TRUE.}

\item{symmetrical}{Boolean. If one knows in advance that the real pragmatic is symmetrical around the null hypothesis, setting this to TRUE might speed up calculations and lead to more accurate results.}

\item{...}{Additional arguments to be passed to lower level functions.}
}
\value{
A string determining the pragmatic hypothesis set.
}
\description{
The pragmatic function calculates a pragmatic hypothesis basic on a simple one.
}
\details{
The pragmatic function performs a grid search for the pragmatic hypothesis related to a simple one. For default, the function assumes thats the real pragmatic is a convex set, and them, performs a conservative binary search to find the set limits. When there is no information weather the pragmatic is a convex set, a user defined grid is needed to perform the search.
}
\examples{

# Generate original data
data <- rnorm(100)

# Define the log-likelihood function
log_f = function(x, mu, sigma) {
  sum(dnorm(x, mu, sigma, log = TRUE))
}

# Estimate the data's standard deviation
sigma_data = sd(data)

# Define a secondary function that calculates the log-likelihood considering estimated deviation
log_f_sigma = function(x, mu) {
  log_f(x, mu, sigma_data)
}

#Define a function that generate samples considering estimated variance
samples = function(mu) {
  rnorm(10, mu, sigma_data) # 10 is the number of new samples Z
}

# Calculate the pragmatic hypothesis
pragmatic(null = 0, epsilon = 0.6, log_f = log_f_sigma, generate_samples = samples, symmetrical = TRUE)
}
